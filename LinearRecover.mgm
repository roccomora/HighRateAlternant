/***************************************************************
 This file contains the function:
 	LinearRecover
***************************************************************/

/***************************************************************
 LinearRecover
 
 Given a generator matrix genMat in systematic form of an
 alternant code, the column permutation permCols, the ground
 field size q, the extension degree m and a partial solution of
 the last (non fixed) coordinates, return the full support and multiplier
 before the permutation of columns

 Input:
        q: Ground field size
        m: Extension degree
        genMat: Generator matrix in systematic form
        permCols: permutation of columns
        sol: partial solution of the last (non fixed) coordinates
        
 Output:
        Support and multiplier before the permutation of columns.
   
***************************************************************/

function LinearRecover(q, m, genMat, permCols, sol)
	k_sh := NumberOfRows(genMat);
	n_sh := NumberOfColumns(genMat);
	// solve the linear system by substitution
	y_recovered := [-&+[genMat[i,j]*sol[(3*m-3)+(j-k_sh)] : j in [k_sh+1..n_sh-1]] : i in [1..k_sh]] cat [sol[(3*m-3)+j] : j in [1..3*m-1]] cat [1];
	if IsEven(q) and q gt 2 then
			x_recovered := [-(&+[genMat[i,j]*sol[j-k_sh]*y_recovered[j] : j in [k_sh+1..n_sh-3]]+genMat[i, n_sh-1]*y_recovered[n_sh-1]+genMat[i, n_sh])/y_recovered[i] : i in [1..k_sh]] cat [sol[j] : j in [1..3*m-3]] cat [0,1,0];
	else
			x_recovered := [-(&+[genMat[i,j]*sol[j-k_sh]*y_recovered[j] : j in [k_sh+1..n_sh-3]]+genMat[i, n_sh-1]*y_recovered[n_sh-1])/y_recovered[i] : i in [1..k_sh]] cat [sol[j] : j in [1..3*m-3]] cat [0,1,0];
	end if;
	// apply the inverse permutation of columns to get back the original order
	y_recovered := [y_recovered[i^(permCols^-1)] : i in [1..n_sh]];
	x_recovered := [x_recovered[i^(permCols^-1)] : i in [1..n_sh]];
	return x_recovered, y_recovered;
end function;

